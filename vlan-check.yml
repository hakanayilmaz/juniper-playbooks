---
- name: üîç Extract ae0 VLAN/IP info using correct XPath (rpc-reply ‚Üí data ‚Üí configuration)
  hosts: all
  connection: netconf
  gather_facts: no
  collections:
    - ansible.netcommon
    - community.general

  vars:
    iface: "ae0"
    vlanx: 2811

  tasks:
    - name: Run NETCONF get-configuration RPC with subtree filter
      ansible.netcommon.netconf_get:
        filter: |
          <configuration>
            <interfaces>
              <interface>
                <name>{{ iface }}</name>
              </interface>
            </interfaces>
          </configuration>
        display: xml
      register: rpc_result

    - name: Extract IPv4 addresses
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "/rpc-reply/data/configuration/interfaces/interface/unit/family/inet/address/name"
        content: text
      register: ipv4_list

    - name: Extract IPv6 addresses
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "/rpc-reply/data/configuration/interfaces/interface/unit/family/inet6/address/name"
        content: text
      register: ipv6_list

    - name: Extract VLAN IDs
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "/rpc-reply/data/configuration/interfaces/interface/unit/vlan-id"
        content: text
      register: vlan_list

    - name: Extract unit names
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "/rpc-reply/data/configuration/interfaces/interface/unit/name"
        content: text
      register: unit_list

    - name: vlan_list bastir amk
      debug:
       var: vlan_list.matches

    - name: Combine VLAN and IP data
      set_fact:
        vlan_info: "{{ unit_list.matches | zip(vlan_list.matches, ipv4_list.matches, ipv6_list.matches) | list }}"

    - name: vlan_list 0. elemanƒ±nƒ± ve tipini g√∂ster
      debug:
        msg: >
          Eleman: {{ vlan_list.matches[0] | string }}
          | Tip: {{ vlan_list.matches[0] | type_debug }}

      # once vlanx i stringe cevir cunku int olabilir, matches bi list ama elemanlar dict
      # map le biz bu dict in vlan-id elemanlarini alioz. 
      # normalde {'vlan-id'} : {'7'}
    - name: VLAN var mƒ± yok mu kontrol et
      set_fact:
        vlan_exists: "{{ vlanx | string in (vlan_list.matches | map(attribute='vlan-id') | list) }}"
    - debug: 
        msg: "VLAN {{vlanx}} mevcut mu? {{ vlan_exists }}"