---
- name: 
  hosts: all
  connection: netconf
  gather_facts: no
  collections:
    - ansible.netcommon
    - community.general

  vars:
    iface: "ae0"
    base_path: "/rpc-reply/data/configuration/interfaces/interface/unit"

  tasks:
    - name: Get interface config via NETCONF
      ansible.netcommon.netconf_get:
        filter: |
          <configuration>
            <interfaces>
              <interface>
                <name>{{ iface }}</name>
              </interface>
            </interfaces>
          </configuration>
        display: xml
      register: rpc_result
      failed_when: false

    - name: Fail if RPC failed or empty
      fail:
        msg: "❌ NETCONF RPC failed or empty for {{ iface }}"
      when:
        - rpc_result is not defined
        - rpc_result.failed or (rpc_result.output | length == 0)

    # 1️⃣ Tüm unit adları (tam liste)
    - name: All unit names (baseline)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}/name"
        content: text
      register: unit_names_raw

    # 2️⃣ VLAN-id’si olan unit adları + değerleri
    - name: Units that have vlan-id (names)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}[vlan-id]/name"
        content: text
      register: vlan_names_raw

    - name: VLAN-id values (aligned with previous names)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}/vlan-id"
        content: text
      register: vlan_values_raw

    # 3️⃣ Description’ı olan unit adları + değerleri
    - name: Units that have description (names)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}[description]/name"
        content: text
      register: desc_names_raw

    - name: Description values (aligned with previous names)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}/description"
        content: text
      register: desc_values_raw

    # 4️⃣ IPv4 olan unit adları + değerleri
    - name: Units that have IPv4 (names)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}[family/inet/address/name]/name"
        content: text
      register: ipv4_names_raw

    - name: IPv4 values (first address per unit; aligned with previous names)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}/family/inet/address/name[1]"
        content: text
      register: ipv4_values_raw

    # 5️⃣ IPv6 olan unit adları + değerleri
    - name: Units that have IPv6 (names)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}[family/inet6/address/name]/name"
        content: text
      register: ipv6_names_raw

    - name: IPv6 values (first address per unit; aligned with previous names)
      community.general.xml:
        xmlstring: "{{ rpc_result.output }}"
        xpath: "{{ base_path }}/family/inet6/address/name[1]"
        content: text
      register: ipv6_values_raw

    # --- Ham listeleri düz string listelere indir ---
    - name: Normalize raw lists to plain string arrays
      set_fact:
        all_units: "{{ unit_names_raw.matches | map(attribute='name') | list }}"
        vlan_names: "{{ vlan_names_raw.matches | map(attribute='name') | list }}"
        vlan_vals:  "{{ vlan_values_raw.matches | map(attribute='vlan-id') | list }}"
        desc_names: "{{ desc_names_raw.matches | map(attribute='name') | list }}"
        desc_vals:  "{{ desc_values_raw.matches | map(attribute='description') | list }}"
        ipv4_names: "{{ ipv4_names_raw.matches | map(attribute='name') | list }}"
        ipv4_vals:  "{{ ipv4_values_raw.matches | map(attribute='name') | list }}"
        ipv6_names: "{{ ipv6_names_raw.matches | map(attribute='name') | list }}"
        ipv6_vals:  "{{ ipv6_values_raw.matches | map(attribute='name') | list }}"

    # --- Unit→value map'leri (items2dict ile) ---
    - name: Build per-field maps keyed by unit name
      set_fact:
        vlan_map: "{{ (vlan_names | zip(vlan_vals) | map('list') | list) | items2dict(key_name=0, value_name=1) }}"
        desc_map: "{{ (desc_names | zip(desc_vals) | map('list') | list) | items2dict(key_name=0, value_name=1) }}"
        ipv4_map: "{{ (ipv4_names | zip(ipv4_vals) | map('list') | list) | items2dict(key_name=0, value_name=1) }}"
        ipv6_map: "{{ (ipv6_names | zip(ipv6_vals) | map('list') | list) | items2dict(key_name=0, value_name=1) }}"

    # --- Nihai tablo ---
    - name: Assemble aligned vlan_info (no per-unit module loop)
      set_fact:
        vlan_info: >-
          {%- set out = [] -%}
          {%- for u in all_units -%}
            {%- set rec = {
              'unit': u,
              'vlan-id': vlan_map.get(u, ''),
              'description': desc_map.get(u, ''),
              'ipv4_subnet': ipv4_map.get(u, ''),
              'ipv6_subnet': ipv6_map.get(u, '')
            } -%}
            {%- if out.append(rec) %}{% endif -%}
          {%- endfor -%}
          {{ out }}

    - name: Display aligned VLAN/IP table
      debug:
        msg: "{{ vlan_info  }}"
